{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport { ndarray as strided } from '@stdlib/blas-ext-base-gcusum';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of a one-dimensional ndarray.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing an input ndarray, an output ndarray, and an ndarray containing the initial sum\n* @returns {number} sum\n*\n* @example\n* import ndarray2array from '@stdlib/ndarray-to-array';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n* import scalar2ndarray from '@stdlib/ndarray-base-from-scalar';\n*\n* var xbuf = [ 1.0, 3.0, 4.0, 2.0 ];\n* var x = new ndarray( 'generic', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = [ 0.0, 0.0, 0.0, 0.0 ];\n* var y = new ndarray( 'generic', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var initial = scalar2ndarray( 0.0, 'generic', 'row-major' );\n*\n* var v = gcusum( [ x, y, initial ] );\n* // returns <ndarray>\n*\n* var bool = ( v === y );\n* // returns true\n*\n* var arr = ndarray2array( v );\n* // returns [ 1.0, 4.0, 8.0, 10.0 ]\n*/\nfunction gcusum( arrays ) {\n\tvar x = arrays[ 0 ];\n\tvar y = arrays[ 1 ];\n\tvar s = arrays[ 2 ];\n\tvar v = getData( s )[ getOffset( s ) ];\n\tstrided( numelDimension( x, 0 ), v, getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusum;\n"],"names":["gcusum","arrays","x","y","s","v","getData","getOffset","strided","numelDimension","getStride"],"mappings":";;gfA2DA,SAASA,EAAQC,GAChB,IAAIC,EAAID,EAAQ,GACZE,EAAIF,EAAQ,GACZG,EAAIH,EAAQ,GACZI,EAAIC,EAASF,GAAKG,EAAWH,IAEjC,OADAI,EAASC,EAAgBP,EAAG,GAAKG,EAAGC,EAASJ,GAAKQ,EAAWR,EAAG,GAAKK,EAAWL,GAAKI,EAASH,GAAKO,EAAWP,EAAG,GAAKI,EAAWJ,IAC1HA,CACR"}